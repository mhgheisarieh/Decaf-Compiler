package parser;

import java_cup.runtime.*;
import ast.*;
import ast.literal.*;

parser code {:

     protected RootNode root;

     void setRoot(RootNode p) { this.root = p; }

     public RootNode getRoot() { return this.root; }

:}

/*reserved*/
// Types
terminal VOID, INT, DOUBLE, BOOL, STRING;
// Boolean
terminal Boolean T_BOOLEANLITERAL;
// Other reserved
terminal CLASS, INTERFACE, NULL, THIS, EXTENDS, IMPLEMENTS, FOR, WHILE, IF, ELSE, RETURN, BREAK, CONTINUE, NEW, NEWARRAY, PRINT, READINTEGER, READLINE, DTOI, ITOD, BTOI, ITOB, PRIVATE, PROTECTED, PUBLIC;

/* identifiers */
terminal String T_ID;

/* literals */
terminal Integer T_INTLITERAL;
terminal Double T_DOUBLELITERAL;
terminal String T_STRINGLITERAL;

/* operators */
terminal ASSIGN, EQ, PLUS;

/* punctuations */
terminal MINUS, PROD, DIV, MOD, LESS, LESSEQ, GT, GTEQ, NOTEQ, NOT, AND, OR, SEMI, COMMA, DOT, LBRACK, BRACK, RBRACK, LPAREN, RPAREN, OPENAC, CLOSEAC;

non terminal Node Initial;
non terminal Node Program;
non terminal Node Decl;
non terminal Node VariableDecl,Variable;
non terminal Node Type;
non terminal Node FunctionDecl;
non terminal Node Formals,TempFormals;
non terminal Node ClassDecl;
non terminal Node Extends;
non terminal Node Field;
non terminal Node Fields;
non terminal Node StmtBlock;
non terminal Node VarDecls;
non terminal Node Stmts;
non terminal Node Stmt;
non terminal Node WhileStmt;
non terminal Node ForStmt;
non terminal Node ReturnStmt;
non terminal Node BreakStmt;
non terminal Node PrintStmt;
non terminal Node Expr;
non terminal Node LValue;
non terminal Node Call;
non terminal Node Actuals;
non terminal Node Constant;
non terminal Node Exprs;
non terminal Node ExprOrNot;
// Matin
nonterminal Node InterfaceDecl;
nonterminal Node Implements, TempImplements;
nonterminal Node AccessMode;
nonterminal Node ProtoTypes, ProtoType;
nonterminal Node IfStmt, ContinueStmt;

nonterminal Node Identifier;

//precedence of operators
precedence left ELSE;
precedence left ASSIGN;
precedence left OR;
precedence left AND;
precedence left EQ, NOTEQ;
precedence left LESS, LESSEQ, GT, GTEQ;
precedence left PLUS, MINUS;
precedence left PROD, DIV, MOD;
precedence left NOT;
precedence left DOT, LBRACK;
precedence left LPAREN;

// grammar
start with Program;

Program      ::=  Decl:d
                    {:
                        RESULT = new RootNode();
                        RESULT.addChild(d);
                        setRoot((RootNode) RESULT);
                    :}
                | Program:p Decl:d
                    {:
                        RESULT = p;
                        RESULT.addChild(d);
                    :}
                ;

Decl         ::= VariableDecl:t
                    {: RESULT = t; :}
                | FunctionDecl:t
                    {: RESULT = t; :}
                | ClassDecl:t
                    {: RESULT = t; :}
                | InterfaceDecl:t
                    {: RESULT = t; :}
                ;

VariableDecl ::= Variable:v SEMI
                     {: RESULT = v; :}
                     ;

Variable     ::= Type:t Identifier:i
                     {:
                        RESULT = new SimpleNode(NodeType.VARIABLE_DECLARATION);
                        RESULT.addChild(t);
                        RESULT.addChild(i);
                        t.setParent(RESULT);
                        i.setParent(RESULT);
                     :};

Type         ::= INT
                    {: RESULT = new PrimitiveNode(NodeType.INT_TYPE, PrimitiveType.INT); :}
                | DOUBLE
                    {: RESULT = new PrimitiveNode(NodeType.DOUBLE_TYPE, PrimitiveType.DOUBLE); :}
                | BOOL
                    {: RESULT = new PrimitiveNode(NodeType.BOOLEAN_TYPE, PrimitiveType.BOOL); :}
                | STRING
                    {: RESULT = new PrimitiveNode(NodeType.STRING_TYPE, PrimitiveType.STRING); :}
                | Identifier:i
                    {: RESULT = i; :}
                | Type BRACK
                    //TODO
                ; //We use Brack insted of LBRACK RBRACK because of Reduce/Reduce conflict

FunctionDecl ::= Type:t Identifier:i LPAREN Formals:f RPAREN StmtBlock:s
                    {:
                        RESULT = new SimpleNode(NodeType.METHOD_DECLARATION);
                        RESULT.addChild(t, i, f, s);
                        t.setParent(RESULT);
                        i.setParent(RESULT);
                        f.setParent(RESULT);
                        s.setParent(RESULT);
                    :}
               | VOID Identifier:i LPAREN Formals:f RPAREN StmtBlock:s
                    {:
                        Node t = new SimpleNode(NodeType.VOID);
                        RESULT = new SimpleNode(NodeType.METHOD_DECLARATION);
                        RESULT.addChild(t, i, f, s);
                        t.setParent(RESULT);
                        i.setParent(RESULT);
                        f.setParent(RESULT);
                        s.setParent(RESULT);
                    :}
               ;

Formals      ::= TempFormals:t
                    {: RESULT = t; :}
               | /*epsilon*/
                    {: RESULT = new EmptyNode(); :}
               ;
TempFormals  ::=  Variable:v
                    {:
                        RESULT = new SimpleNode(NodeType.ARGUMENTS);
                        Node a = new SimpleNode(NodeType.ARGUMENT);
                        RESULT.addChild(a);
                        a.setParent(RESULT);
                        a.addChild(v);
                        v.setParent(a);
                    :}
               | TempFormals:t COMMA Variable:v
                    {:
                        RESULT = t;
                        Node a = new SimpleNode(NodeType.ARGUMENT);
                        RESULT.addChild(a);
                        a.setParent(RESULT);
                        a.addChild(v);
                        v.setParent(a);
                    :}
               ;

ClassDecl    ::= CLASS Identifier Extends Implements OPENAC Fields CLOSEAC
                    //TODO
               ;
Extends      ::= EXTENDS Identifier
                    //TODO
               | /*epsilon*/
                    {: RESULT = new EmptyNode(); :}
               ;
Implements   ::= IMPLEMENTS TempImplements
                    //TODO
               ;
TempImplements ::= Identifier
                    //TODO
               | TempImplements COMMA Identifier
                    //TODO
               ;
Fields       ::= Fields Field
                    //TODO
               | /*epsilon*/
                    {: RESULT = new EmptyNode(); :}
               ;

Field        ::= AccessMode VariableDecl
                    //TODO
               | AccessMode FunctionDecl
                    //TODO
               ;

AccessMode   ::= PRIVATE
                    //TODO
               | PROTECTED
                    //TODO
               | PUBLIC
                    //TODO
               | /*epsilon*/
                    //TODO
               ;

InterfaceDecl::= INTERFACE Identifier OPENAC ProtoTypes CLOSEAC;
ProtoTypes   ::= ProtoTypes ProtoType | /*epsilon*/ ;

ProtoType    ::= Type Identifier LPAREN Formals RPAREN SEMI
               | VOID Identifier LPAREN Formals RPAREN SEMI;

StmtBlock    ::= OPENAC VarDecls:v Stmts:s CLOSEAC
                    {:
                        RESULT = new SimpleNode(NodeType.BLOCK);
                        RESULT.addChild(v, s);
                        v.setParent(RESULT);
                        s.setParent(RESULT);
                    :}
               ;
VarDecls     ::= VarDecls:vs VariableDecl:v
                    {:
                        RESULT = vs;
                        vs.addChild(v);
                        v.setParent(vs);
                    :}
               | /*epsilon*/
                    {: RESULT = new EmptyNode(); :}
               ;
Stmts        ::= Stmt:s Stmts:ss
                    {:
                        RESULT = s;
                        s.addChild(ss);
                        ss.setParent(s);
                    :}
               | /*epsilon*/
                    {: RESULT = new EmptyNode(); :}
               ;

Stmt         ::= Expr:e SEMI
                    {: RESULT = e; :}
               | /*epsilon*/ SEMI
                    {: RESULT = new EmptyNode(); :}
               | IfStmt:s
                    {: RESULT = s; :}
               | WhileStmt:s
                    {: RESULT = s; :}
               | ForStmt:s
                    {: RESULT = s; :}
               | BreakStmt:s
                    {: RESULT = s; :}
               | ContinueStmt:s
                    {: RESULT = s; :}
               | ReturnStmt:s
                    {: RESULT = s; :}
               | PrintStmt:s
                    {: RESULT = s; :}
               | StmtBlock:s
                    {: RESULT = s; :}
               ;

IfStmt       ::= IF LPAREN Expr:e RPAREN Stmt:s
                    {:
                        RESULT = new SimpleNode(NodeType.IF_STATEMENT);
                        RESULT.addChild(e, s);
                        e.setParent(RESULT);
                        s.setParent(RESULT);
                    :}
               | IF LPAREN Expr:e RPAREN Stmt:s1 ELSE Stmt:s2
                    {:
                        RESULT = new SimpleNode(NodeType.IF_STATEMENT);
                        RESULT.addChild(e, s1, s2);
                        e.setParent(RESULT);
                        s1.setParent(RESULT);
                        s2.setParent(RESULT);
                    :}
               ;

WhileStmt    ::= WHILE LPAREN Expr:e RPAREN Stmt:s
                    {:
                        RESULT = new SimpleNode(NodeType.REPEAT_STATEMENT); //TODO check REPEAT_STATEMENT vs WHILE_STATEMENT
                        RESULT.addChild(e, s);
                        e.setParent(RESULT);
                        s.setParent(RESULT);
                    :}
               ;

ForStmt      ::= FOR LPAREN ExprOrNot:eon1 SEMI Expr:e SEMI ExprOrNot:eon2 RPAREN Stmt:s
                    {:
                        RESULT = new SimpleNode(NodeType.FOR_STATEMENT);
                        RESULT.addChild(eon1, e, eon2, s);
                        eon1.setParent(RESULT);
                        e.setParent(RESULT);
                        eon2.setParent(RESULT);
                        s.setParent(RESULT);
                    :}
               ;
ExprOrNot    ::= Expr:e
                    {: RESULT = e; :}
               | /*epsilon*/
                    {: RESULT = new EmptyNode(); :}
               ;

ReturnStmt   ::= RETURN ExprOrNot:eon SEMI
                    {:
                        RESULT = new SimpleNode(NodeType.RETURN_STATEMENT);
                        RESULT.addChild(eon);
                    :}
               ;

BreakStmt    ::= BREAK SEMI
                    {: RESULT = new SimpleNode(NodeType.BREAK_STATEMENT); :}
               ;

ContinueStmt ::= CONTINUE SEMI
                    {: RESULT = new SimpleNode(NodeType.CONTINUE_STATEMENT); :}
               ;

PrintStmt    ::=    PRINT LPAREN Exprs:es RPAREN SEMI
                    {:
                        RESULT = new SimpleNode(NodeType.PRINT_STATEMENT);
                        RESULT.addChild(es);
                        es.setParent(RESULT);
                    :}
               ;
Exprs        ::=    Expr:e
                    {:
                        RESULT = new ExpressionNode();
                        RESULT.addChild(e);
                        e.setParent(RESULT);
                    :}
               |    Exprs:es COMMA Expr:e
                    {:
                        RESULT = es;
                        RESULT.addChild(e);
                        e.setParent(RESULT);
                    :}
               ;

Expr         ::=    LValue:l ASSIGN Expr:e
                    {:
                        RESULT = new ExpressionNode();
                        RESULT.addChild(l, e);
                        l.setParent(RESULT);
                        e.setParent(RESULT);
                    :}
               |    Constant:c
                    {:
                        RESULT = new ExpressionNode();
                        RESULT.addChild(c);
                        c.setParent(RESULT);
                    :}
               |    LValue:l
                    {:
                        RESULT = new ExpressionNode();
                        RESULT.addChild(l);
                        l.setParent(RESULT);
                    :}
               |    THIS
                    {:
                        RESULT = new ExpressionNode();
                        Node t = new SimpleNode(NodeType.THIS);
                        RESULT.addChild(t);
                        t.setParent(RESULT);
                    :}
               |    Call:c
                    {:
                        RESULT = new ExpressionNode();
                        RESULT.addChild(c);
                        c.setParent(RESULT);
                    :}
               |    LPAREN Expr RPAREN
                        //TODO
               |    Expr PLUS Expr
                        //TODO
               |    Expr MINUS Expr
                        //TODO
               |    Expr PROD Expr
                        //TODO
               |    Expr DIV Expr
                        //TODO
               |    Expr MOD Expr
                        //TODO
               |    MINUS Expr
                        //TODO
               |    Expr LESS Expr
                        //TODO
               |    Expr LESSEQ Expr
                        //TODO
               |    Expr GT Expr
                        //TODO
               |    Expr GTEQ Expr
                        //TODO
               |    Expr EQ Expr
                        //TODO
               |    Expr NOTEQ Expr
                        //TODO
               |    Expr AND Expr
                        //TODO
               |    Expr OR Expr
                        //TODO
               |    NOT Expr
                        //TODO
               |    READINTEGER LPAREN RPAREN
                        //TODO
               |    READLINE LPAREN RPAREN
                        //TODO
               |    NEW Identifier
                        //TODO
               |    NEWARRAY LPAREN Expr COMMA Type RPAREN
                        //TODO
               |    ITOD LPAREN Expr RPAREN
                        //TODO
               |    DTOI LPAREN Expr RPAREN
                        //TODO
               |    ITOB LPAREN Expr RPAREN
                        //TODO
               |    BTOI LPAREN Expr RPAREN;
                        //TODO

LValue       ::=    Identifier
                        //TODO
               |    Expr DOT Identifier
                        //TODO
               |    Expr LBRACK Expr RBRACK ;
                        //TODO

Call         ::=    Identifier LPAREN Actuals RPAREN
                        //TODO
               |    Expr DOT Identifier LPAREN Actuals RPAREN ;
                        //TODO

Actuals      ::=    Exprs
                        //TODO
               | /*epsilon*/
                        //TODO
               ;

Constant    ::=    T_INTLITERAL:t
                        {: RESULT = new IntegerLiteralNode(t); :}
               |   T_DOUBLELITERAL:t
                        {: RESULT = new DoubleLiteralNode(t); :}
               |   T_BOOLEANLITERAL:t
                        {: RESULT = new BooleanLiteralNode(t); :}
               |   T_STRINGLITERAL:t
                        {: RESULT = new StringLiteralNode(t); :}
               |   NULL
                        {: RESULT = new SimpleNode(NodeType.NULL_LITERAL); :}
               ;

Identifier  ::=    T_ID:i
                        {:RESULT = new IdentifierNode(i); :}
               ;